//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import mhpUtil.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class getStatements<R, A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> ( Query() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> "try"
    * f15 -> "{"
    * f16 -> ( VarDeclaration() )*
    * f17 -> ( QParStatement() )*
    * f18 -> "}"
    * f19 -> "catch"
    * f20 -> "("
    * f21 -> Identifier()
    * f22 -> Identifier()
    * f23 -> ")"
    * f24 -> "{"
    * f25 -> "}"
    * f26 -> "}"
    * f27 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;

      String className = n.f1.toString();
      ClassUtil newClass = new ClassUtil(className, true);

      staticObs.currClass = newClass;
      staticObs.classList.add(newClass);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);

      FunctionUtil newFunc = new FunctionUtil(newClass);
      newClass.setRun(newFunc);
      staticObs.currFunc = newFunc;
      staticObs.mainFunc = newFunc;

      n.f16.accept(this, argu);

      newFunc.beginScope();
      n.f17.accept(this, argu);
      newFunc.endScope(); newFunc.initSE();

      staticObs.currFunc = null;

      n.f18.accept(this, argu);
      n.f19.accept(this, argu);
      n.f20.accept(this, argu);
      n.f21.accept(this, argu);
      n.f22.accept(this, argu);
      n.f23.accept(this, argu);
      n.f24.accept(this, argu);
      n.f25.accept(this, argu);
      n.f26.accept(this, argu);
      n.f27.accept(this, argu);

      staticObs.currClass = null;

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      String className = n.f1.toString();
      ClassUtil newClass = new ClassUtil(className, false);

      staticObs.currClass = newClass;
      staticObs.classList.add(newClass);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      staticObs.currClass = null;

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> "Thread"
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;

      String className = n.f1.toString();
      ClassUtil newClass = new ClassUtil(className, true);

      staticObs.currClass = newClass;
      staticObs.classList.add(newClass);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);

      staticObs.currClass = null;

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String varType = n.f0.f0.choice.toString();
      n.f1.accept(this, argu);
      String varName = n.f1.toString();
      n.f2.accept(this, argu);

      if(staticObs.currFunc != null)
      {
          VariableUtil vNew = new VariableUtil(varName, varType, staticObs.currFunc);
          staticObs.currFunc.addLocal(vNew);
      }
      else
          staticObs.currClass.addField(varName,varType);

      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> "void"
    * f2 -> "run"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> "{"
    * f6 -> "try"
    * f7 -> "{"
    * f8 -> ( VarDeclaration() )*
    * f9 -> ( QParStatement() )*
    * f10 -> "}"
    * f11 -> "catch"
    * f12 -> "("
    * f13 -> Identifier()
    * f14 -> Identifier()
    * f15 -> ")"
    * f16 -> "{"
    * f17 -> "}"
    * f18 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      FunctionUtil newFunc = new FunctionUtil(staticObs.currClass);
      staticObs.currClass.setRun(newFunc);
      staticObs.currFunc = newFunc;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);

      newFunc.beginScope();
      n.f9.accept(this, argu);
      newFunc.endScope(); newFunc.initSE();

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);

      staticObs.currFunc = null;

      return _ret;
   }

   /**
    * f0 -> BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( Ann() )*
    * f1 -> Statement()
    */
   public R visit(QParStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Label()
    * f2 -> <SCOMMENT2>
    */
   public R visit(Ann n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ":"
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil sUtil = new StatementUtil(iden, "label", null);
      staticObs.currFunc.addStatement(sUtil);

      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | MessageSend()
    *       | PrintStatement()
    *       | SynchStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( QParStatement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      staticObs.currFunc.beginScope();
      n.f1.accept(this, argu);
      staticObs.currFunc.endScope();

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String iden = n.f0.toString();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      StatementUtil sNew = new StatementUtil(iden, "assignment", null);
      staticObs.currFunc.addStatement(sNew);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String iden = n.f0.toString();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      StatementUtil sNew = new StatementUtil(iden, "field_assignment", null);
      staticObs.currFunc.addStatement(sNew);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String cond = n.f2.toString();
      StatementUtil ifStart = new StatementUtil(cond, "if_start", null);
      n.f3.accept(this, argu);

      staticObs.currFunc.beginScope();
      n.f4.accept(this, argu);
      staticObs.currFunc.endScope();

      n.f5.accept(this, argu);

      staticObs.currFunc.beginScope();
      n.f6.accept(this, argu);
      staticObs.currFunc.endScope();

      Pair<StatementUtil, StatementUtil> pr2 = staticObs.currFunc.popBack();
      Pair<StatementUtil, StatementUtil> pr1 = staticObs.currFunc.popBack();

      ifStart.addNext(pr1.getKey());
      ifStart.addNext(pr2.getKey());

      StatementUtil ifEnd = new StatementUtil(null, "if_end", null);
      pr1.getValue().addNext(ifEnd);
      pr2.getValue().addNext(ifEnd);

      staticObs.currFunc.addStatement(ifStart, ifEnd);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String cond = n.f2.toString();
      StatementUtil whileStmt = new StatementUtil(cond, "while", null);

      n.f3.accept(this, argu);

      staticObs.currFunc.beginScope();
      n.f4.accept(this, argu);
      staticObs.currFunc.endScope();

      Pair<StatementUtil, StatementUtil> pr = staticObs.currFunc.popBack();
      whileStmt.addNext(pr.getKey());
      pr.getValue().addNext(whileStmt);

      staticObs.currFunc.addStatement(whileStmt);
      return _ret;
   }

   /**
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(SynchStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String iden = n.f2.toString();
      StatementUtil syncStart = new StatementUtil(iden, "entry", null);
      staticObs.monitors.add(iden);

      n.f3.accept(this, argu);

      staticObs.currFunc.beginScope();
      n.f4.accept(this, argu);
      staticObs.currFunc.endScope();

      Pair<StatementUtil, StatementUtil> pr = staticObs.currFunc.popBack();
      StatementUtil syncEnd = new StatementUtil(iden, "exit", null);
      staticObs.monitors.removeLast();

      syncStart.addNext(pr.getKey());
      pr.getValue().addNext(syncEnd);

      staticObs.currFunc.addStatement(syncStart, syncEnd);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String iden = n.f2.toString();
      StatementUtil printStmt = new StatementUtil(iden, "print", null);
      staticObs.currFunc.addStatement(printStmt);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> callStartMethod()
    *       | callNotifyMethod()
    *       | callNotifyAllMethod()
    *       | callWaitMethod()
    *       | callJoinMethod()
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "start"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(callStartMethod n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil startStmt = new StatementUtil(iden, "start", null);
      staticObs.currFunc.addStatement(startStmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "notify"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(callNotifyMethod n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil notifyStmt = new StatementUtil(iden, "notify", null);
      staticObs.currFunc.addStatement(notifyStmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "notifyAll"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(callNotifyAllMethod n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil notifyAllStmt = new StatementUtil(iden, "notifyAll", null);
      staticObs.currFunc.addStatement(notifyAllStmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "wait"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(callWaitMethod n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil waitStmt = new StatementUtil(iden, "wait", null);
      StatementUtil waitingStmt = new StatementUtil(iden, "waiting", null);
      StatementUtil nEntryStmt = new StatementUtil(iden, "notified_entry", null);
      staticObs.currFunc.addStatement(waitStmt);
      staticObs.currFunc.addStatement(waitingStmt);
      staticObs.currFunc.addStatement(nEntryStmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "join"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public R visit(callJoinMethod n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      String iden = n.f0.toString();
      StatementUtil joinStmt = new StatementUtil(iden, "join", null);
      staticObs.currFunc.addStatement(joinStmt);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Identifier()
    * f2 -> "mhp?"
    * f3 -> Identifier()
    * f4 -> <SCOMMENT2>
    */
   public R visit(Query n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String iden1 = n.f1.toString();
      String iden2 = n.f3.toString();
      staticObs.addQuery(iden1, iden2);
      return _ret;
   }

}
